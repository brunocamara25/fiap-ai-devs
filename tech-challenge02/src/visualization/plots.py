"""
M√≥dulo com fun√ß√µes para visualiza√ß√£o de dados e resultados de otimiza√ß√£o de portf√≥lio.
"""
import matplotlib.pyplot as plt
import pandas as pd
import streamlit as st
import plotly.express as px
import seaborn as sns
import numpy as np
import uuid

from src.metrics.performance import calculate_metrics
from src.metrics.risk import calculate_diversification, calculate_var

def display_stock_prices(data):
    """
    Exibe pre√ßos das a√ß√µes na interface Streamlit.
    
    Par√¢metros:
        data (pd.DataFrame): DataFrame com os pre√ßos ajustados das a√ß√µes.
    """
    st.subheader("Pre√ßos Atuais das A√ß√µes")
    latest_prices = data.iloc[-1]
    price_df = pd.DataFrame({
        'A√ß√£o': latest_prices.index,
        'Pre√ßo': latest_prices.values
    })
    st.dataframe(price_df.style.format({'Pre√ßo': '${:.2f}'}))

def display_progress_chart(best_history):
    """
    Exibe gr√°fico de progresso da otimiza√ß√£o.
    
    Par√¢metros:
        best_history (list): Lista com o hist√≥rico do melhor √≠ndice por gera√ß√£o.
    """
    fig, ax = plt.subplots(figsize=(10, 6))
    ax.plot(best_history, 'b-')
    ax.set_xlabel('Gera√ß√£o')
    ax.set_ylabel('Melhor √çndice')
    ax.set_title('Progresso da Otimiza√ß√£o')
    ax.grid(True)
    st.pyplot(fig)

def display_allocation_chart(best_weights, selected_tickers):
    """
    Exibe gr√°fico de aloca√ß√£o do portf√≥lio em forma de pizza.
    
    Par√¢metros:
        best_weights (np.ndarray): Pesos do melhor portf√≥lio.
        selected_tickers (list): Lista de c√≥digos das a√ß√µes selecionadas.
    """
    fig, ax = plt.subplots(figsize=(10, 6))
    ax.pie(best_weights, labels=selected_tickers, autopct='%1.1f%%')
    ax.set_title('Melhor Aloca√ß√£o de Portf√≥lio Atual')
    st.pyplot(fig)

def plot_pareto_front(pareto_front_history):
    """
    Exibe o gr√°fico de evolu√ß√£o do Pareto Front ao longo das gera√ß√µes.
    
    Par√¢metros:
        pareto_front_history (list): Lista com o hist√≥rico do Pareto Front por gera√ß√£o.
    """
    st.subheader("Evolu√ß√£o do Pareto Front")
    fig, ax = plt.subplots(figsize=(10, 6))
    for generation, pareto_front in enumerate(pareto_front_history):
        returns = [score[0] for _, score in pareto_front]
        risks = [score[1] for _, score in pareto_front]
        ax.scatter(risks, returns, label=f'Gera√ß√£o {generation + 1}', alpha=0.6)
    ax.set_xlabel('Risco (Volatilidade)')
    ax.set_ylabel('Retorno')
    ax.set_title('Evolu√ß√£o do Pareto Front')
    ax.legend()
    ax.grid(True)
    st.pyplot(fig)

def display_initial_data(data, train_cov_matrix):
    """
    Exibe dados iniciais do portf√≥lio, como pre√ßos e diversifica√ß√£o.
    
    Par√¢metros:
        data (pd.DataFrame): DataFrame com os pre√ßos ajustados das a√ß√µes.
        train_cov_matrix (pd.DataFrame): Matriz de covari√¢ncia dos retornos de treinamento.
    """
    latest_prices = data.iloc[-1]
    col1, col2 = st.columns(2)

    with col1:
        st.subheader("Pre√ßos Atuais das A√ß√µes")
        st.dataframe(pd.DataFrame({'A√ß√£o': latest_prices.index, 'Pre√ßo': latest_prices.values}).style.format({'Pre√ßo': '${:.2f}'}))
        avg_correlation = calculate_diversification(train_cov_matrix)
        st.markdown(f"**Correla√ß√£o M√©dia do Portf√≥lio:** {avg_correlation:.2f}")

    with col2:
        st.subheader("Retorno das A√ß√µes")
        fig, ax = plt.subplots(figsize=(10, 6))
        (train_cov_matrix + 1).cumprod().plot(ax=ax)
        ax.set_title("Retornos Acumulados")
        ax.grid(True)
        st.pyplot(fig)
        plt.close(fig)

def update_progress_display(generation, num_generations, progress_bar, status_text, metrics_text, best_weights, train_data, train_cov_matrix, risk_free_rate, evaluation_method, best_sharpe):
    """
    Atualiza a exibi√ß√£o de progresso e m√©tricas durante a otimiza√ß√£o.
    
    Par√¢metros:
        generation (int): Gera√ß√£o atual.
        num_generations (int): N√∫mero total de gera√ß√µes.
        progress_bar: Barra de progresso do Streamlit.
        status_text: Container de texto para status.
        metrics_text: Container de texto para m√©tricas.
        best_weights (np.ndarray): Pesos do melhor portf√≥lio.
        train_data (pd.DataFrame): Dados de treinamento.
        train_cov_matrix (pd.DataFrame): Matriz de covari√¢ncia dos retornos de treinamento.
        risk_free_rate (float): Taxa livre de risco.
        evaluation_method (str): M√©todo de avalia√ß√£o.
        best_sharpe (float): Melhor √≠ndice Sharpe encontrado.
    """
    progress_bar.progress((generation + 1) / num_generations)
    status_text.text(f"Gera√ß√£o {generation + 1}/{num_generations}")
    if best_weights is not None:
        ret, vol, _ = calculate_metrics(best_weights, train_data, train_cov_matrix, risk_free_rate)
        metrics_text.markdown(f"""
        **Melhor Portf√≥lio Atual:**
        - Retorno Anual Esperado: {ret:.2%}
        - Volatilidade Anual Esperada: {vol:.2%}
        - √çndice {evaluation_method}: {best_sharpe:.4f}
        """)

def update_progress_chart(progress_chart, best_history):
    """
    Atualiza o gr√°fico de progresso da otimiza√ß√£o.
    
    Par√¢metros:
        progress_chart: Container para o gr√°fico.
        best_history (list): Lista com o hist√≥rico do melhor √≠ndice por gera√ß√£o.
    """
    with progress_chart.container():
        st.subheader("Progresso da Otimiza√ß√£o")
        fig, ax = plt.subplots(figsize=(6, 4))
        ax.plot(best_history, 'b-')
        ax.set_xlabel('Gera√ß√£o')
        ax.set_ylabel('Melhor √çndice')
        ax.set_title('Progresso da Otimiza√ß√£o')
        ax.grid(True)
        st.pyplot(fig)
        plt.close(fig)

def update_allocation_chart(allocation_chart, best_weights, selected_tickers):
    """
    Atualiza o gr√°fico de aloca√ß√£o do portf√≥lio.
    
    Par√¢metros:
        allocation_chart: Container para o gr√°fico.
        best_weights (np.ndarray): Pesos do melhor portf√≥lio.
        selected_tickers (list): Lista de c√≥digos das a√ß√µes selecionadas.
    """
    if best_weights is not None:
        with allocation_chart.container():
            st.subheader("Aloca√ß√£o do Portf√≥lio")
            fig, ax = plt.subplots(figsize=(6, 4))
            ax.pie(best_weights, labels=selected_tickers, autopct='%1.1f%%')
            ax.set_title('Melhor Aloca√ß√£o de Portf√≥lio Atual')
            st.pyplot(fig)
            plt.close(fig)

def display_final_results(best_weights, test_data, test_cov_matrix, risk_free_rate, investment, selected_tickers, data, train_cov_matrix, returns, evaluation_method, pareto_front_history, best_history, benchmark_returns):
    """
    Exibe os resultados finais da otimiza√ß√£o de portf√≥lio.
    
    Par√¢metros:
        best_weights (np.ndarray): Pesos do melhor portf√≥lio.
        test_data (pd.DataFrame): Dados de teste.
        test_cov_matrix (pd.DataFrame): Matriz de covari√¢ncia dos retornos de teste.
        risk_free_rate (float): Taxa livre de risco.
        investment (float): Valor do investimento.
        selected_tickers (list): Lista de c√≥digos das a√ß√µes selecionadas.
        data (pd.DataFrame): DataFrame com os pre√ßos ajustados das a√ß√µes.
        train_cov_matrix (pd.DataFrame): Matriz de covari√¢ncia dos retornos de treinamento.
        returns (pd.DataFrame): DataFrame com os retornos di√°rios.
        evaluation_method (str): M√©todo de avalia√ß√£o.
        pareto_front_history (list): Lista com o hist√≥rico do Pareto Front por gera√ß√£o.
        best_history (list): Lista com o hist√≥rico do melhor √≠ndice por gera√ß√£o.
        benchmark_returns (float): Retorno do benchmark.
    """
    # Avaliar no conjunto de teste
    test_return, test_vol, test_sharpe = calculate_metrics(best_weights, test_data, test_cov_matrix, risk_free_rate)
    
    # Se√ß√£o: Desempenho no Conjunto de Teste
    st.header("üìä Desempenho no Conjunto de Teste")
    col1, col2 = st.columns(2)
    with col1:
        st.markdown(f"- **Retorno:** {test_return:.2%}")
        st.markdown(f"- **Volatilidade:** {test_vol:.2%}")
        st.markdown(f"- **√çndice {evaluation_method}:** {test_sharpe:.4f}")
    with col2:
        st.subheader("Gr√°fico de Aloca√ß√£o (Teste)")
        plot_interactive_allocation(best_weights, selected_tickers)

    # Se√ß√£o: Portf√≥lio Final
    st.header("üéØ Portf√≥lio Final")
    final_return, final_vol, final_sharpe = calculate_metrics(best_weights, returns, train_cov_matrix, risk_free_rate)
    display_portfolio_metrics(final_return, final_vol, final_sharpe, investment, best_weights, selected_tickers, data, evaluation_method)

    # Se√ß√£o: Gr√°ficos Finais
    st.header("üìà Gr√°ficos Finais")
    display_final_charts(pareto_front_history=pareto_front_history, best_history=best_history, evaluation_method=evaluation_method)

    # Exporta√ß√£o de Resultados
    st.header("üì§ Exportar Resultados")
    latest_prices = data.iloc[-1]
    allocation_df = pd.DataFrame({
        'A√ß√£o': selected_tickers,
        'Peso (%)': [f"{weight * 100:.2f}" for weight in best_weights],
        'Valor Alocado ($)': [f"{weight * investment:,.2f}" for weight in best_weights],
        'Quantidade de A√ß√µes': [(weight * investment / latest_prices[ticker]).round(2) for weight, ticker in zip(best_weights, selected_tickers)]
    })
    export_results(allocation_df, benchmark_returns)

def display_portfolio_metrics(final_return, final_vol, final_sharpe, investment, best_weights, selected_tickers, data, evaluation_method):
    """
    Exibe m√©tricas e aloca√ß√£o do portf√≥lio final.
    
    Par√¢metros:
        final_return (float): Retorno anualizado do portf√≥lio final.
        final_vol (float): Volatilidade anualizada do portf√≥lio final.
        final_sharpe (float): √çndice de Sharpe do portf√≥lio final.
        investment (float): Valor do investimento.
        best_weights (np.ndarray): Pesos do melhor portf√≥lio.
        selected_tickers (list): Lista de c√≥digos das a√ß√µes selecionadas.
        data (pd.DataFrame): DataFrame com os pre√ßos ajustados das a√ß√µes.
        evaluation_method (str): M√©todo de avalia√ß√£o.
    """
    col1, col2 = st.columns(2)
    monthly_return = (1 + final_return) ** (1/12) - 1
    projected_values = {
        "1 m√™s": investment * (1 + monthly_return),
        "3 meses": investment * (1 + monthly_return) ** 3,
        "6 meses": investment * (1 + monthly_return) ** 6,
        "1 ano": investment * (1 + final_return),
        "2 anos": investment * (1 + final_return) ** 2,
        "5 anos": investment * (1 + final_return) ** 5
    }
    
    # Coluna 1: M√©tricas do Portf√≥lio
    with col1:
        st.subheader("üíº Aloca√ß√£o do Investimento")
        latest_prices = data.iloc[-1]
        allocation_df = pd.DataFrame({
            'A√ß√£o': selected_tickers,
            'Peso (%)': [f"{weight * 100:.2f}" for weight in best_weights],
            'Valor Alocado ($)': [f"{weight * investment:,.2f}" for weight in best_weights],
            'Quantidade de A√ß√µes': [(weight * investment / latest_prices[ticker]).round(2) for weight, ticker in zip(best_weights, selected_tickers)]
        })
        
        # Exibir tabela de aloca√ß√£o
        st.dataframe(allocation_df)
        
    # Coluna 2: Aloca√ß√£o do Investimento
    with col2:
        # Exibir gr√°fico de pizza para aloca√ß√£o
        st.markdown("### Gr√°fico de Aloca√ß√£o")
        fig, ax = plt.subplots(figsize=(6, 4))
        ax.pie(best_weights, labels=selected_tickers, autopct='%1.1f%%', startangle=90)
        ax.set_title("Distribui√ß√£o do Portf√≥lio")
        st.pyplot(fig)
    
    # Ap√≥s a otimiza√ß√£o
    highlight_best_portfolio(best_weights, selected_tickers, investment)
    
    # Exibir resultados finais
    st.header("üìà Resultados Finais")
    display_summary(final_return, final_vol, final_sharpe, investment, projected_values, evaluation_method)

def display_final_charts(pareto_front_history, best_history, evaluation_method):
    """
    Exibe gr√°ficos finais: Pareto Front e evolu√ß√£o do √≠ndice.
    
    Par√¢metros:
        pareto_front_history (list): Lista com o hist√≥rico do Pareto Front por gera√ß√£o.
        best_history (list): Lista com o hist√≥rico do melhor √≠ndice por gera√ß√£o.
        evaluation_method (str): M√©todo de avalia√ß√£o.
    """
    col1, col2 = st.columns(2)

    # Gr√°fico do Pareto Front
    with col1:
        st.subheader("Evolu√ß√£o do Pareto Front")
        fig, ax = plt.subplots(figsize=(6, 4))
        for generation, pareto_front in enumerate(pareto_front_history):
            returns = [score[0] for _, score in pareto_front]
            risks = [score[1] for _, score in pareto_front]
            ax.scatter(risks, returns, label=f'Gera√ß√£o {generation + 1}', alpha=0.6)
        ax.set_xlabel('Risco (Volatilidade)')
        ax.set_ylabel('Retorno')
        ax.set_title('Evolu√ß√£o do Pareto Front')
        ax.legend()
        ax.grid(True)
        st.pyplot(fig)
        plt.close(fig)

    # Gr√°fico de evolu√ß√£o do √≠ndice
    with col2:
        st.subheader("Evolu√ß√£o do Melhor √çndice")
        fig, ax = plt.subplots(figsize=(6, 4))
        ax.plot(best_history, 'b-')
        ax.set_xlabel('Gera√ß√£o')
        ax.set_ylabel(f'Melhor √çndice ({evaluation_method})')
        ax.set_title('Progresso da Otimiza√ß√£o')
        ax.grid(True)
        st.pyplot(fig)
        plt.close(fig)

def highlight_best_portfolio(best_weights, selected_tickers, investment):
    """
    Destaca o melhor portf√≥lio encontrado.
    
    Par√¢metros:
        best_weights (np.ndarray): Pesos do melhor portf√≥lio.
        selected_tickers (list): Lista de c√≥digos das a√ß√µes selecionadas.
        investment (float): Valor do investimento.
    """
    st.markdown("### üèÜ Melhor Portf√≥lio")
    for ticker, weight in zip(selected_tickers, best_weights):
        st.markdown(f"- **{ticker}**: {weight:.2%} (${weight * investment:,.2f})")

def plot_interactive_allocation(best_weights, selected_tickers):
    """
    Gera um gr√°fico interativo de aloca√ß√£o do portf√≥lio.
    
    Par√¢metros:
        best_weights (np.ndarray): Pesos do melhor portf√≥lio.
        selected_tickers (list): Lista de c√≥digos das a√ß√µes selecionadas.
    """
    df = pd.DataFrame({
        'A√ß√£o': selected_tickers,
        'Peso': [w * 100 for w in best_weights]
    })
    fig = px.pie(df, values='Peso', names='A√ß√£o', title='Aloca√ß√£o do Portf√≥lio')
    st.plotly_chart(fig)

def display_summary(final_return, final_vol, final_sharpe, investment, projected_values, evaluation_method):
    """
    Exibe um resumo das m√©tricas e proje√ß√µes do portf√≥lio.
    
    Par√¢metros:
        final_return (float): Retorno anualizado do portf√≥lio final.
        final_vol (float): Volatilidade anualizada do portf√≥lio final.
        final_sharpe (float): √çndice de Sharpe do portf√≥lio final.
        investment (float): Valor do investimento.
        projected_values (dict): Dicion√°rio com proje√ß√µes de valores.
        evaluation_method (str): M√©todo de avalia√ß√£o.
    """
    st.subheader("üìä M√©tricas do Portf√≥lio")
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown(f"**Retorno Anualizado:** {final_return:.2%}")
        st.markdown(f"**Volatilidade Anualizada:** {final_vol:.2%}")
        st.markdown(f"**√çndice {evaluation_method}:** {final_sharpe:.4f}")
    
    with col2:
        st.markdown("**Proje√ß√£o de Valor do Investimento:**")
        for period, value in projected_values.items():
            st.markdown(f"- **{period}:** ${value:,.2f}")

def plot_correlation_matrix(train_cov_matrix):
    """
    Exibe a matriz de correla√ß√£o das a√ß√µes.
    
    Par√¢metros:
        train_cov_matrix (pd.DataFrame): Matriz de covari√¢ncia dos retornos de treinamento.
    """
    correlation_matrix = train_cov_matrix.corr()
    fig, ax = plt.subplots(figsize=(10, 8))
    sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', ax=ax)
    ax.set_title('Matriz de Correla√ß√£o das A√ß√µes')
    st.pyplot(fig)

def generate_unique_key(prefix="key"):
    """
    Gera uma chave √∫nica para elementos Streamlit que precisam ser distintos.
    
    Par√¢metros:
        prefix (str): Prefixo para a chave.
        
    Retorna:
        str: Chave √∫nica.
    """
    return f"{prefix}_{uuid.uuid4().hex}"

def export_results(allocation_df, benchmark_returns=None):
    """
    Exibe op√ß√µes para exportar os resultados da otimiza√ß√£o.
    
    Par√¢metros:
        allocation_df (pd.DataFrame): DataFrame com a aloca√ß√£o do portf√≥lio.
        benchmark_returns (float, opcional): Retorno do benchmark.
    """
    # Exibir o DataFrame de aloca√ß√£o
    st.subheader("Resumo de Aloca√ß√£o")
    st.dataframe(allocation_df)
    
    # Bot√£o para baixar como CSV
    csv = allocation_df.to_csv(index=False)
    st.download_button(
        label="Baixar como CSV",
        data=csv,
        file_name="portfolio_allocation.csv",
        mime="text/csv",
        key=generate_unique_key()
    )
    
    # Adicionar compara√ß√£o com benchmark se dispon√≠vel
    if benchmark_returns is not None:
        st.markdown(f"**Retorno do Benchmark:** {benchmark_returns:.2%}") 