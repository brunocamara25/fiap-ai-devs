import streamlit as st
import pandas as pd
from genetic_algorithm import optimize_portfolio

# Configura√ß√µes da p√°gina
st.set_page_config(
    page_title="Otimizador de Portf√≥lio",
    page_icon="üìà",
    layout="wide"
)

# T√≠tulo e descri√ß√£o
st.title("üìä Otimizador de Portf√≥lio com Algoritmo Gen√©tico")
st.markdown("""
Este aplicativo usa um algoritmo gen√©tico para encontrar a aloca√ß√£o ideal de portf√≥lio baseada no √çndice Sharpe.
Voc√™ pode selecionar a√ß√µes, definir seu valor de investimento e acompanhar o processo de otimiza√ß√£o em tempo real!
""")

# Sidebar
with st.sidebar:
    st.sidebar.markdown("""
    ### Tutorial
    1. Selecione as a√ß√µes e o per√≠odo de an√°lise.
    2. Configure os par√¢metros do algoritmo gen√©tico.
    3. Clique em "Otimizar Portf√≥lio" para iniciar.
    """)
    st.header("üìù Configura√ß√µes Gerais")
    with st.expander("üìÖ Par√¢metros Gerais"):
        investment = st.number_input("Valor do Investimento ($)", min_value=1000, max_value=10000000, value=10000, step=1000)
        start_date = st.date_input("Data Inicial", value=pd.Timestamp("2020-01-01"))
        end_date = st.date_input("Data Final", value=pd.Timestamp("2023-01-01"))
        default_tickers = ["AAPL", "GOOGL", "MSFT", "AMZN", "TSLA"]
        custom_tickers = st.text_input("Digite c√≥digos de a√ß√µes adicionais (separados por v√≠rgula)", "META, NVDA").replace(" ", "")
        all_tickers = default_tickers + [t.strip() for t in custom_tickers.split(",") if t.strip()]
        selected_tickers = st.multiselect("Selecione a√ß√µes para seu portf√≥lio", all_tickers, default=default_tickers[:3])

    with st.expander("‚öôÔ∏è Par√¢metros do Algoritmo Gen√©tico"):
        population_size = st.slider("Tamanho da Popula√ß√£o", 50, 200, 100)
        num_generations = st.slider("N√∫mero de Gera√ß√µes", 10, 100, 50)
        mutation_rate = st.slider("Taxa de Muta√ß√£o", 0.0, 0.5, 0.1)
        risk_free_rate = st.slider("Taxa Livre de Risco (%)", 0.0, 5.0, 2.0) / 100

    with st.expander("üîß Configura√ß√µes Avan√ßadas"):
        multiobjective = st.checkbox("Ativar Multiobjetivo (Retorno e Risco)", value=False)
        init_strategy = st.selectbox(
            "Estrat√©gia de Inicializa√ß√£o",
            options=["random", "uniform", "return_based", "volatility_inverse"],
            index=0
        )
        selection_method = st.selectbox(
            "M√©todo de Sele√ß√£o",
            options=["tournament", "roulette", "elitism"],
            index=0
        )
        evaluation_method = st.selectbox(
            "M√©todo de Avalia√ß√£o",
            options=["sharpe", "sortino", "treynor", "var"],
            index=0
        )
        crossover_method = st.selectbox(
            "M√©todo de Crossover",
            options=["uniform", "single_point", "arithmetic"],
            index=0
        )
        mutation_distribution = st.selectbox(
            "Distribui√ß√£o de Muta√ß√£o",
            options=["normal", "uniform"],
            index=0
        )
        min_weight = st.slider("Peso M√≠nimo (%)", 0, 20, 5) / 100
        max_weight = st.slider("Peso M√°ximo (%)", 20, 100, 50) / 100
        elitism_count = st.slider("N√∫mero de Indiv√≠duos Elitistas", 1, 10, 1)

    st.markdown("### ‚ÑπÔ∏è Ajuda")
    st.markdown("""
    - **Popula√ß√£o**: N√∫mero de indiv√≠duos na popula√ß√£o.
    - **Gera√ß√µes**: N√∫mero de itera√ß√µes do algoritmo.
    - **Taxa de Muta√ß√£o**: Probabilidade de muta√ß√£o em cada indiv√≠duo.
    - **Taxa Livre de Risco**: Taxa de retorno sem risco usada no c√°lculo do Sharpe.
    """)

# Bot√£o para rodar a otimiza√ß√£o
if st.button("üöÄ Otimizar Portf√≥lio"):
    optimize_portfolio(
        selected_tickers,
        start_date,
        end_date,
        investment,
        population_size,
        num_generations,
        mutation_rate,
        risk_free_rate,
        min_weight,
        max_weight,
        init_strategy=init_strategy,
        evaluation_method=evaluation_method,
        selection_method=selection_method,
        crossover_method=crossover_method,
        mutation_distribution=mutation_distribution,
        elitism_count=elitism_count,
        multiobjective=multiobjective
    )